@page "/client"

@inject Data.Database.GymServices service
@inject Data.Models.BarCode barcode

@if (!barcode.IsAdmin)
{<p>No Permission!</p>}
@foreach (var clientt in Clients)
{
    @if (clientt.Barcode == barcode.Code && barcode.IsAdmin)
    {<MatButton OnClick="@OpenDialogNew" Raised="true" TrailingIcon="exposure_plus_1" Style="margin-bottom=5">Add New Client</MatButton>
        <label></label>
        <div class="row bg-light">
            <table class="table table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th>Client Id</th>
                        <th>Name</th>
                        <th>Phone</th>
                        <th>Email</th>
                        <th>Photo</th>
                        <th>InsertDate</th>
                        <th>IdCard</th>
                        <th>Barcode</th>
                        <th>Comment</th>
                        <th>Update</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Clients.Any())
                    {
                        @foreach (var client in Clients)
                        {
                            <tr>
                                <td>@client.ClientId</td>
                                <td>@client.Name</td>
                                <td>@client.Phone</td>
                                <td>@client.Email</td>
                                <td><img src="https://cdn4.iconfinder.com/data/icons/e-commerce-181/512/477_profile__avatar__man_-512.png" alt="Profile" width="50" height="50"></td>
                                <td>@client.InsertDate</td>
                                <td>@client.IDCard</td>
                                <td>@client.Barcode</td>
                                <td>@client.Comment</td>
                                <td><button class="btn btn-warning" @onclick="(() => SetClientForUpdate(client))">Update</button></td>
                                <td><button class="btn btn-danger" @onclick="(() => DeleteClient(client))">Delete</button></td>

                            </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="6"><strong>No client available</strong></td></tr>
                    }
                </tbody>
            </table>
        </div>
        @if (barcode.IsAdmin)
        {
            <MatDialog @bind-IsOpen="@dialogIsOpenNew">
                <MatDialogTitle>Add New Client</MatDialogTitle>
                <MatDialogContent>
                    <EditForm Model="@NewClient">
                        <div class="form-group">
                            <label for="name" style=" color:red; font-weight:bold;">@ErrorList</label>
                        </div>
                        <div class="form-group">
                            <label for="name">Client Name</label>
                            <input type="text" id="name" placeholder="John" class="form-control" @bind-value="@NewClient.Name" />
                        </div>

                        <div class="form-group">
                            <label for="price">Phone</label>
                            <input type="text" id="price" placeholder="0741739002" class="form-control" @bind="@NewClient.Phone" />
                        </div>

                        <div class="form-group">
                            <label for="quantity">Email</label>
                            <input type="text" id="quantity"placeholder="john@gmail.com" class="form-control" @bind="@NewClient.Email" />
                        </div>

                        @*<div class="form-group">
                            <label for="Description">Photo</label>
                            <input type="text" id="Description" class="form-control" @bind="@NewClient.Photo" />
                        </div>*@

                        <div class="form-group">
                            <label for="Description">IdCard</label>
                            <input type="text" id="Description" class="form-control" @bind="@NewClient.IDCard" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Barcode</label>
                            <input type="text" id="Description" placeholder="123John12" class="form-control" @bind="@NewClient.Barcode" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Comment</label>
                            <input type="text" id="Description" class="form-control" @bind="@NewClient.Comment" />
                        </div>
                    </EditForm>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(e => { dialogIsOpenNew = false; })">Exit</MatButton>
                    <MatButton OnClick="@AddNewClient">Add</MatButton>
                </MatDialogActions>
            </MatDialog>
            <MatDialog @bind-IsOpen="@dialogIsOpenUpdate">
                <MatDialogTitle>Update Client</MatDialogTitle>
                <MatDialogContent>
                    <EditForm Model="@UpdateClient">
                        <div class="form-group">
                            <label for="name" style=" color:red; font-weight:bold;">@ErrorList</label>
                        </div>
                        <div class="form-group">
                            <label for="name">Client Name</label>
                            <input type="text" id="name" class="form-control" @bind-value="@UpdateClient.Name" />
                        </div>
                        <div class="form-group">
                            <label for="price">Phone</label>
                            <input type="text" id="price" class="form-control" @bind="@UpdateClient.Phone" />
                        </div>
                        <div class="form-group">
                            <label for="quantity">Email</label>
                            <input type="text" id="quantity" class="form-control" @bind="@UpdateClient.Email" />
                        </div>
                        @*<div class="form-group">
            <label for="Description">Photo</label>
            <input type="text" id="Description" class="form-control" @bind="@UpdateClient.Photo" />
        </div>*@
                        <div class="form-group">
                            <label for="Description">IdCard</label>
                            <input type="text" id="Description" class="form-control" @bind="@UpdateClient.IDCard" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Barcode</label>
                            <input type="text" id="Description" class="form-control" @bind="@UpdateClient.Barcode" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Comment</label>
                            <input type="text" id="Description" class="form-control" @bind="@UpdateClient.Comment" />
                        </div>
                    </EditForm>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(e => { dialogIsOpenUpdate = false; })">Exit</MatButton>
                    <MatButton OnClick="@UpdateClientData">Update</MatButton>
                </MatDialogActions>
            </MatDialog>
        }
    }

    @code {

        List<Data.Models.Client> Clients = new List<Data.Models.Client>();
        public string ErrorList { get; set; }
        protected override async Task OnInitializedAsync()
        {
            await RefreshClients();
        }

        private async Task RefreshClients()
        {
            Clients = await service.GetClientAsync();
        }

        public Data.Models.Client NewClient { get; set; } = new Data.Models.Client();
        private async Task AddNewClient()
        {

            //NewClient = new Data.Models.Client();
            NewClient.IsDeleted = false;
            NewClient.InsertDate = DateTime.Now;
            if (Utils.isValidEmail(NewClient.Email) && Utils.IsValidName(NewClient.Name) && Utils.IsOnlyDigits(NewClient.Phone) && IsValidBarcode(NewClient.Barcode))
            {
                await service.AddClientAsync(NewClient);
                await RefreshClients();
                dialogIsOpenNew = false;
                ErrorList = "";
            }
            else
            {
                ErrorList = "Invalid Input Data";
            }

        }

        Data.Models.Client UpdateClient = new Data.Models.Client();
        private void SetClientForUpdate(Data.Models.Client client)
        {
            UpdateClient = client;
            OpenDialogUpdate();
        }

        private async Task UpdateClientData()
        {
            if (Utils.isValidEmail(UpdateClient.Email) && Utils.IsValidName(UpdateClient.Name) && Utils.IsOnlyDigits(UpdateClient.Phone))
            {
                await service.UpdateClientAsync(UpdateClient);
                await RefreshClients();
                dialogIsOpenUpdate = false;
                ErrorList = "";
            }
            else { ErrorList = "Invalid Input Data"; }
        }

        private async Task DeleteClient(Data.Models.Client client)
        {
            await service.DeleteClientAsync(client);
            await RefreshClients();
        }

        bool dialogIsOpenNew = false;

        void OpenDialogNew()
        {
            dialogIsOpenNew = true;
        }
        bool dialogIsOpenUpdate = false;

        void OpenDialogUpdate()
        {
            dialogIsOpenUpdate = true;
        }
        private bool IsValidBarcode(string Barcode)
        {
            bool valid = true;
            foreach (var client in Clients) { if (client.Barcode == Barcode) { valid = false; } }
            return valid;
        }
    }
}

