@page "/statistics"
    @inject Data.Database.GymServices service
    <div class="row bg-light">
        <label for="Description"></label>
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Client Id</th>
                    <th>BarCode</th>
                    <th>Date</th>

                </tr>
            </thead>
            <tbody>
                @if (Entries.Any())
                {

                        @foreach (var entrie in Entries)
                        {
                            <tr>
                                <td>@entrie.ClientId</td>
                                <td>@entrie.Barcode</td>
                                <td>@entrie.Date</td>

                            </tr>
                        }
                    


                }
                else
                {
                    <tr><td colspan="6"><strong>No client available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

    @code {
        public String BarCode { get; set; }


        List<Data.Models.Client> Clients = new List<Data.Models.Client>();
        List<Data.Models.Entries> Entries = new List<Data.Models.Entries>();
        protected override async Task OnInitializedAsync()
        {
            await Refresh();
        }

        private async Task Refresh()
        {

            await RefreshClients();
            await RefreshEntries();

        }

        private async Task RefreshClients()
        {
            Clients = await service.GetClientAsync();
        }
        private async Task RefreshEntries()
        {
            Entries = await service.GetEntriesAsync();
        }

        public Data.Models.Client NewClient { get; set; } = new Data.Models.Client();
        private async Task AddNewClient()
        {
            await service.AddClientAsync(NewClient);
            NewClient = new Data.Models.Client();
            await RefreshClients();
        }

        Data.Models.Client UpdateClient = new Data.Models.Client();
        private void SetClientForUpdate(Data.Models.Client client)
        {
            UpdateClient = client;
        }

        private async Task UpdateClientData()
        {
            await service.UpdateClientAsync(UpdateClient);
            await RefreshClients();
        }

        private async Task DeleteClient(Data.Models.Client client)
        {
            await service.DeleteClientAsync(client);
            await RefreshClients();
        }

        public Data.Models.Entries NewEntries { get; set; } = new Data.Models.Entries();
        private async Task AddNewEntries()
        {

            foreach (var client in Clients)
            {
                if (client.Barcode == BarCode)
                {
                    NewEntries.ClientId = client.ClientId;
                    NewEntries.Barcode = BarCode;
                    NewEntries.GymId = 1001;
                    NewEntries.Date = DateTime.Now;
                }
            }

            await service.AddEntriesAsync(NewEntries);

        }

    }
