@page "/statistics"
@inject Data.Database.GymServices service
@inject Data.Models.BarCode barcode

<div class="container">
    <div class="row bg-light">
        <div class="text-center p-3 mb-3">
            <label for="Description">Select filter</label>
        </div>
        <div class="text-center p-3 mb-3">
            <select class="form-control" @bind="@SelectedFilter">

                <option value=""> </option>
                <option value="client">Client </option>
                <option value="entries">Entries </option>
                <option value="ticket">Tickets </option>



            </select>
        </div>
    </div>
</div>
@if (barcode.IsAdmin && SelectedFilter == "entries")
{
<div class="row bg-light">
    <label for="Description"></label>
    <div class="text-center p-3 mb-3">
        <label>Enter client barcode!</label>
        <input type="text" id="Description" class="form-control" @bind="@FilterBarcode" />
    </div>
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Client Id</th>
                <th>BarCode</th>
                <th>Date</th>
                <th>TicketId</th>

            </tr>
        </thead>
        <tbody>
            @if (Entries.Any())
            {
                @if (FilterBarcode == "")
                {
                    @foreach (var entrie in Entries)
                    {
                        <tr>
                            <td>@entrie.ClientId</td>
                            <td>@entrie.Barcode</td>
                            <td>@entrie.Date</td>
                            <td>@entrie.TicketId</td>

                        </tr>
                    }



                }
                else
                {
                    @foreach (var entrie in Entries)
                        @if (entrie.Barcode == FilterBarcode)
                        {
                            {
                        <tr>
                            <td>@entrie.ClientId</td>
                            <td>@entrie.Barcode</td>
                            <td>@entrie.Date</td>
                            <td>@entrie.TicketId</td>

                        </tr>
                                    }
                                }
                        }
            }
        </tbody>
    </table>
</div>
}

@if (barcode.IsAdmin && SelectedFilter == "client")
{
    <div class="row bg-light">
        <div class="text-center p-3 mb-3">
            <label>Enter client name!</label>
            <input type="text" id="Description" class="form-control" @bind="@FilterName" />
        </div>
        <label for="Description"></label>
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Client Id</th>
                    <th>Name</th>
                    <th>Barcode</th>


                </tr>
            </thead>
            <tbody>
                @if (Clients.Any())
                {
                    @if (FilterName == "")
                        @foreach (var client in Clients)

                        {
                            <tr>
                                <td>@client.ClientId</td>
                                <td>@client.Name</td>
                                <td>@client.Barcode</td>


                            </tr>
                        }
                        else
                        {
                            @foreach (var client in Clients)
                                @if (client.Name == FilterName)
                                {
                                    <tr>
                                        <td>@client.ClientId</td>
                                        <td>@client.Name</td>
                                        <td>@client.Barcode</td>


                                    </tr>
                                }

                            }



                }
                else
                {
                    <tr><td colspan="6"><strong>No client available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
}

@if (barcode.IsAdmin && SelectedFilter == "ticket")
{<div class="text-center p-3 mb-3">
        <label>Select ticket type:</label>
        <select class="form-control" @bind="@SelectedTicketID">
            @foreach (var ticket in SeasonTickets)
            {
                <option value="@ticket.TicketId"> @ticket.Name </option>
            }
            }
            }
        </select>
    </div>
    <div class="row bg-light">
        <label for="Description"></label>
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Client Id</th>
                    <th>BarCode</th>

                </tr>
            </thead>
            <tbody>
                @if (Tickets.Any())
                {
                    @if (SelectedTicketID==0)
                    {@foreach (var ticket in Tickets)
                        
                            {
                                <tr>
                                    <td>@ticket.ClientId</td>
                                    <td>@ticket.Barcode</td>


                                </tr>
                            
                    } 
                }
                else
                {
                    @foreach (var ticket in Tickets)
                    {@if (ticket.TicketId == SelectedTicketID)
                        {
                            <tr>
                                <td>@ticket.ClientId</td>
                                <td>@ticket.Barcode</td>


                            </tr>
                        }
                }


                }

        }
            </tbody>
        </table>
    </div>
}



@code {
    public String BarCode { get; set; }
    public String SelectedFilter { get; set; }
    public String FilterName { get; set; }
    public String FilterBarcode { get; set; }
    public int SelectedTicketID { get; set; }
    List<Data.Models.SeasonTicket> SeasonTickets = new List<Data.Models.SeasonTicket>();
    List<Data.Models.Client> Clients = new List<Data.Models.Client>();
    List<Data.Models.Entries> Entries = new List<Data.Models.Entries>();
    List<Data.Models.ClientTickets> Tickets = new List<Data.Models.ClientTickets>();
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        FilterName = "";
        SelectedTicketID = 0;
        FilterBarcode = "";
    }

    private async Task Refresh()
    {

        await RefreshClients();
        await RefreshEntries();
        await RefreshTickets();
        await RefreshSeasonTicket();


    }

    private async Task RefreshClients()
    {
        Clients = await service.GetClientAsync();
    }
    private async Task RefreshEntries()
    {
        Entries = await service.GetEntriesAsync();
    }
    private async Task RefreshTickets()
    {
        Tickets = await service.GetClientTicketsAsync();
    }
    private async Task RefreshSeasonTicket()
    {
        SeasonTickets = await service.GetTicketAsync();
    }

    public Data.Models.Client NewClient { get; set; } = new Data.Models.Client();
    private async Task AddNewClient()
    {
        await service.AddClientAsync(NewClient);
        NewClient = new Data.Models.Client();
        await RefreshClients();
    }

    Data.Models.Client UpdateClient = new Data.Models.Client();
    private void SetClientForUpdate(Data.Models.Client client)
    {
        UpdateClient = client;
    }

    private async Task UpdateClientData()
    {
        await service.UpdateClientAsync(UpdateClient);
        await RefreshClients();
    }

    private async Task DeleteClient(Data.Models.Client client)
    {
        await service.DeleteClientAsync(client);
        await RefreshClients();
    }

    public Data.Models.Entries NewEntries { get; set; } = new Data.Models.Entries();
    private async Task AddNewEntries()
    {

        foreach (var client in Clients)
        {
            if (client.Barcode == BarCode)
            {
                NewEntries.ClientId = client.ClientId;
                NewEntries.Barcode = BarCode;
                NewEntries.GymId = 1001;
                NewEntries.Date = DateTime.Now;
            }
        }

        await service.AddEntriesAsync(NewEntries);

    }

}
